// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders the base component correctly with two buttons and a tray 1`] = `
<div>
  <Button
    as="button"
    buttonRef={[Function]}
    fluidWidth={false}
    margin="0"
    onClick={[Function]}
    size="medium"
    type="button"
    variant="icon"
  >
    <IconPlusLine
      title="Add To Do"
    />
  </Button>
  <Popover
    contentRef={[Function]}
    defaultShow={false}
    on="click"
    onToggle={[Function]}
    placement="bottom center"
    rootClose={true}
    show={false}
    variant="default"
    withArrow={true}
  >
    <PopoverTrigger>
      <Button
        as="button"
        buttonRef={[Function]}
        fluidWidth={false}
        margin="0"
        onClick={[Function]}
        size="medium"
        type="button"
        variant="icon"
      >
        <Badge
          count={1}
          formatOverflowText={[Function]}
          placement="top end"
          pulse={false}
          standalone={false}
          type="count"
          variant="primary"
        >
          <IconAlertsLine
            title="1 opportunity"
          />
        </Badge>
      </Button>
    </PopoverTrigger>
    <PopoverContent>
      <Opportunities
        courses={
          Array [
            Object {
              "id": "1",
              "shortName": "Course Short Name",
            },
          ]
        }
        dismiss={[Function]}
        opportunities={
          Array [
            Object {
              "course_id": "1",
              "due_at": "2017-03-09T20:40:35Z",
              "html_url": "http://www.non_default_url.com",
              "id": "1",
              "name": "learning object title",
            },
          ]
        }
        timeZone="America/Denver"
        togglePopover={[Function]}
      />
    </PopoverContent>
  </Popover>
  <Tray
    border={false}
    closeButtonLabel="Close"
    closeButtonRef={[Function]}
    closeButtonVariant="icon"
    contentRef={[Function]}
    isDismissable={true}
    isOpen={false}
    label="Add To Do"
    onExited={[Function]}
    onRequestClose={[Function]}
    placement="end"
    shadow={true}
    trapFocus={true}
  >
    <UpdateItemTray
      courses={
        Array [
          Object {
            "id": "1",
            "shortName": "Course Short Name",
          },
        ]
      }
      locale="en"
      onDeletePlannerItem={[Function]}
      onSavePlannerItem={[Function]}
      timeZone="America/Denver"
    />
  </Tray>
</div>
`;
