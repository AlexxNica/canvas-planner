// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`does not pass takeFocusRef to first day that matches firstNewDayKey if not setFocusAfterLoad 1`] = `
<div
  className="PlannerApp"
>
  <ShowOnFocusButton
    buttonProps={
      Object {
        "onClick": undefined,
      }
    }
    buttonRef={[Function]}
  >
    Load prior dates
  </ShowOnFocusButton>
  <Connect(SmartDay)
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-26"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-25T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <LoadingFutureIndicator />
  <div />
</div>
`;

exports[`passes takeFocusRef to first day that matches firstNewDayKey if setFocusAfterLoad 1`] = `
<div
  className="PlannerApp"
>
  <ShowOnFocusButton
    buttonProps={
      Object {
        "onClick": undefined,
      }
    }
    buttonRef={[Function]}
  >
    Load prior dates
  </ShowOnFocusButton>
  <Connect(SmartDay)
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    takeFocusRef={[Function]}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-26"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-25T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <LoadingFutureIndicator />
  <div />
</div>
`;

exports[`renders base component using dayKeys 1`] = `
<div
  className="PlannerApp"
>
  <ShowOnFocusButton
    buttonProps={
      Object {
        "onClick": undefined,
      }
    }
    buttonRef={[Function]}
  >
    Load prior dates
  </ShowOnFocusButton>
  <Connect(SmartDay)
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-26"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-25T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <LoadingFutureIndicator />
  <div />
</div>
`;

exports[`shows new activity button when new activity is indicated 1`] = `
<div
  className="PlannerApp"
>
  <StickyButton
    direction="up"
    offset="0px"
    onClick={[Function]}
  >
    New Activity
  </StickyButton>
  <ShowOnFocusButton
    buttonProps={
      Object {
        "onClick": undefined,
      }
    }
    buttonRef={[Function]}
  >
    Load prior dates
  </ShowOnFocusButton>
  <Connect(SmartDay)
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-26"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-25T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <LoadingFutureIndicator />
  <div />
</div>
`;

exports[`shows only the loading component when the isLoading prop is true 1`] = `
<div
  className="PlannerApp"
>
  <ShowOnFocusButton
    buttonProps={
      Object {
        "onClick": undefined,
      }
    }
    buttonRef={[Function]}
  >
    Load prior dates
  </ShowOnFocusButton>
  <Container
    display="block"
    padding="xx-large medium"
    textAlign="center"
  >
    <Spinner
      size="medium"
      title="Loading planner items"
      variant="default"
    />
  </Container>
  <div />
</div>
`;

exports[`shows the loading past indicator when loadingPast prop is true 1`] = `
<div
  className="PlannerApp"
>
  <ShowOnFocusButton
    buttonProps={
      Object {
        "onClick": undefined,
      }
    }
    buttonRef={[Function]}
  >
    Load prior dates
  </ShowOnFocusButton>
  <LoadingPastIndicator
    onComponentWillUnmount={[Function]}
  />
  <Connect(SmartDay)
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <Connect(SmartDay)
    day="2017-04-26"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-25T15:00:00.000Z",
        },
      ]
    }
    stickyOffset={0}
    timeZone="UTC"
  />
  <LoadingFutureIndicator />
  <div />
</div>
`;
